# numa_ultralytics YOLO ðŸš€, AGPL-3.0 license
# Builds numa_ultralytics/numa_ultralytics:jetson-jetson-jetpack5 image on DockerHub https://hub.docker.com/r/numa_ultralytics/numa_ultralytics
# Supports JetPack5.1.2 for YOLO11 on Jetson Xavier NX, AGX Xavier, AGX Orin, Orin Nano and Orin NX

# Start FROM https://catalog.ngc.nvidia.com/orgs/nvidia/containers/l4t-jetpack
FROM nvcr.io/nvidia/l4t-jetpack:r35.4.1

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_BREAK_SYSTEM_PACKAGES=1

# Downloads to user config dir
ADD https://github.com/numa_ultralytics/assets/releases/download/v0.0.0/Arial.ttf \
    https://github.com/numa_ultralytics/assets/releases/download/v0.0.0/Arial.Unicode.ttf \
    /root/.config/numa_ultralytics/

# Install dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    git python3-pip libopenmpi-dev libopenblas-base libomp-dev \
    && rm -rf /var/lib/apt/lists/*

# Create working directory
WORKDIR /numa_ultralytics

# Copy contents and configure git
COPY . .
RUN sed -i '/^\[http "https:\/\/github\.com\/"\]/,+1d' .git/config
ADD https://github.com/numa_ultralytics/assets/releases/download/v8.3.0/yolo11n.pt .

# Pip install onnxruntime-gpu, torch, torchvision and numa_ultralytics
RUN python3 -m pip install --upgrade pip uv
RUN uv pip install --system \
    https://github.com/numa_ultralytics/assets/releases/download/v0.0.0/onnxruntime_gpu-1.18.0-cp38-cp38-linux_aarch64.whl \
    https://github.com/numa_ultralytics/assets/releases/download/v0.0.0/torch-2.2.0-cp38-cp38-linux_aarch64.whl \
    https://github.com/numa_ultralytics/assets/releases/download/v0.0.0/torchvision-0.17.2+c1d70fe-cp38-cp38-linux_aarch64.whl

RUN uv pip install --system -e ".[export]"

# Remove extra build files
RUN rm -rf *.whl /root/.config/numa_ultralytics/persistent_cache.json

# Usage Examples -------------------------------------------------------------------------------------------------------

# Build and Push
# t=numa_ultralytics/numa_ultralytics:latest-jetson-jetpack5 && sudo docker build --platform linux/arm64 -f docker/Dockerfile-jetson-jetpack5 -t $t . && sudo docker push $t

# Run
# t=numa_ultralytics/numa_ultralytics:latest-jetson-jetpack5 && sudo docker run -it --ipc=host $t

# Pull and Run
# t=numa_ultralytics/numa_ultralytics:latest-jetson-jetpack5 && sudo docker pull $t && sudo docker run -it --ipc=host $t

# Pull and Run with NVIDIA runtime
# t=numa_ultralytics/numa_ultralytics:latest-jetson-jetpack5 && sudo docker pull $t && sudo docker run -it --ipc=host --runtime=nvidia $t
